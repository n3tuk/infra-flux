---
deployment:
  replicas: 3

podDisruptionBudget:
  enabled: true
  maxUnavailable: 1

ingressClass:
  # An IngressCLass is created with the traefik-crds
  enabled: false

experimental:
  kubernetesGateway:
    enabled: false
gateway:
  enabled: false
gatewayClass:
  enabled: false

ingressRoute:
  dashboard:
    enabled: true
    matchRule: PathPrefix(`/dashboard`) || PathPrefix(`/api`)
    services:
      - name: api@internal
        kind: TraefikService
    entryPoints: ['traefik']
    tls:
      secretName: infress-traefik-dashboard-tls
  healthcheck:
    enabled: true
    matchRule: PathPrefix(`/ping`)
    services:
      - name: ping@internal
        kind: TraefikService
    entryPoints: ['traefik']
    tls:
      secretName: infress-traefik-dashboard-tls

updateStrategy:
  type: RollingUpdate
  rollingUpdate:
    maxUnavailable: 0
    maxSurge: 1

providers:
  kubernetesCRD:
    enabled: true
    allowCrossNamespace: true
    allowExternalNameServices: true
    allowEmptyServices: true
    ingressClass: traefik
    namespaces: []

  kubernetesIngress:
    enabled: true
    allowExternalNameServices: true
    allowEmptyServices: true
    ingressClass: traefik
    publishedService:
      enabled: true

  kubernetesGateway:
    enabled: false

logs:
  general:
    format: json
    level: INFO
  access:
    enabled: true
    format: json

metrics:
  prometheus:
    entryPoint: metrics
    service:
      enabled: true
    serviceMonitor:
      enabled: true
    prometheusRule:
      enabled: false
  otlp:
    enabled: false

autoscaling:
  enabled: false

persistence:
  enabled: false

affinity:
  podAntiAffinity:
    requiredDuringSchedulingIgnoredDuringExecution:
      - labelSelector:
          matchLabels:
            app.kubernetes.io/name: '{{ template "traefik.name" . }}'
            app.kubernetes.io/instance: '{{ .Release.Name }}-{{ include "traefik.namespace" . }}'
        topologyKey: kubernetes.io/hostname

topologySpreadConstraints:
  - maxSkew: 1
    topologyKey: topology.kubernetes.io/zone
    whenUnsatisfiable: ScheduleAnyway
    labelSelector:
      matchLabels:
        app.kubernetes.io/name: '{{ template "traefik.name" . }}'
        app.kubernetes.io/instance: '{{ .Release.Name }}-{{ include "traefik.namespace" . }}'
    matchLabelKeys:
      - pod-template-hash
  - maxSkew: 1
    topologyKey: kubernetes.io/hostname
    whenUnsatisfiable: DoNotSchedule
    labelSelector:
      matchLabels:
        app.kubernetes.io/name: '{{ template "traefik.name" . }}'
        app.kubernetes.io/instance: '{{ .Release.Name }}-{{ include "traefik.namespace" . }}'
    matchLabelKeys:
      - pod-template-hash

---
apiVersion: monitoring.coreos.com/v1
kind: PrometheusRule
metadata:
  name: cert-manager
  namespace: certificates-system
  labels:
    alertmanager: metrics
spec:
  groups:
    - name: cert-manager
      rules:
        - alert: CertManagerAbsent
          expr: |-
            absent(
              up{
                namespace="certificates-system",
                container="cert-manager-controller"
              } == 1
            )
          for: 30m
          annotations:
            title: >-
              `cert-manager has Disappeared from Prometheus`
            summary: >-
              The `cert-manager` job in the `{{$externalLabels.cluster}}` Cluster has
              *dissappeared* from Prometheus' service discovery and may not be running, or the
              `Service` may not be being scraped, and hence cannot be checked and monitored.
            description: >-
              `certificates-system`/`cert-manager` has *disappeared*
          labels:
            ignore: outside-extended-hours
            # severity can be info, errors, warning, critical
            severity: critical
            # slack is the name of the channel to send messages to
            slack: kub3-${cluster}-alerts-infra
            # pagerduty can either be send or ignore for Alerts
            pagerduty: send
            # incidentio can either create incidents, send Alerts, or ignore
            incidentio: create
            # team sets the Team and Escalation Path to use for the incident
            team: platform

        - alert: CertManagerPolicyApproverAbsent
          expr: |-
            absent(
              up{
                namespace="certificates-system",
                container="cert-manager-approver-policy"
              } == 1
            )
          for: 30m
          annotations:
            title: >-
              `cert-manager-approver-policy` has Disappeared from Prometheusg
            summary: >-
              The `cert-manager-approver-policy` job in the `{{$externalLabels.cluster}}` Cluster
              has *dissappeared* from Prometheus' service discovery and may not be running, or the
              `Service` may not be being scraped, and hence cannot be checked and monitored.
            description: >-
              `certificates-system`/`cert-manager` has *disappeared*
          labels:
            ignore: outside-extended-hours
            severity: critical
            slack: kub3-${cluster}-alerts-infra
            pagerduty: send
            incidentio: create
            team: platform

        - alert: CertificateNotRenewed
          expr: |-
            floor(
              (   certmanager_certificate_expiration_timestamp_seconds
                - time()
              ) / 86400
            ) < 14
          for: 5m
          annotations:
            title: >-
              `Certificate` Not Renewing
            summary: >-
              One of more of the `Certificate` resources managed by `cert-manager` is *nearing its
              expiration date and has not yet been renewed*, and therefore will expire in less than
              fourteen days.
            # exported_namespace here is used for the namespace of the certificate, rather than the
            # namespace cert-manager is running within
            description: >-
              `{{$labels.exported_namespace}}`/`{{$labels.name}}` `Certificate` (*{{$value}} days
              left*, `{{$labels.issuer_group}}`/`{{$labels.issuer_kind}}` `{{$labels.issuer_name}}`)
          labels:
            ignore: outside-non-work-hours
            severity: warning
            slack: kub3-${cluster}-alerts-infra
            pagerduty: send
            incidentio: create
            team: platform

        - alert: CertificateNotReady
          expr: |-
            certmanager_certificate_ready_status{
              condition="True"
            } == 0
          for: 15m
          annotations:
            title: >-
              `Certificate` Not Ready
            summary: >-
              One of more of the `Certificate` resources managed by `cert-manager` is *in the*
              `NotReady` *state* during at least the last fifteen minutes, and cannot be used by any
              consuming service or resource.
            description: >-
              `{{$labels.exported_namespace}}`/`{{$labels.name}}` `Certificate`
              (`{{$labels.issuer_group}}`/`{{$labels.issuer_kind}}` `{{$labels.issuer_name}}`)
          labels:
            ignore: outside-extended-hours
            severity: warning
            slack: kub3-${cluster}-alerts-infra
            pagerduty: ignore
            incidentio: ignore
            team: platform

        - alert: CertManagerSyncFailed
          expr: |-
            round(
              increase(
                certmanager_controller_sync_error_count{
                  namespace="certificates-system"
                }[5m]
              ) * on(pod) group_left(node)
              kube_pod_info
            ) > 1
          for: 5m
          annotations:
            title: >-
              `cert-manager` Synchronisation Failures
            summary: >-
              One or more of the `cert-manager` Controllers in the `{{$externalLabels.cluster}}`
              Cluster have *failed to synchronise Kubernetes objects* for at least the last five
              minutes.
            description: >-
              `{{$labels.controller}}` Controller in `{{$labels.pod}}` on `Node` `{{$labels.node}}`
              (*{{$value}} object{{if ne $value 1.0}}s{{end}}*)
          labels:
            ignore: outside-non-work-hours
            severity: warning
            slack: kub3-${cluster}-alerts-infra
            pagerduty: send
            incidentio: create
            team: platform

        - alert: CertManagerACMEErrors
          expr: |-
            sum by (host, pod, method, status) (
              round(
                increase(
                  certmanager_http_acme_client_request_count{
                    status!~"2..|429"
                  }[1h]
                )
              )
            ) * on(pod) group_left(node)
            kube_pod_info
            > 2
          for: 30m
          annotations:
            title: >-
              `cert-manager` ACME Errors
            summary: >-
              One or more of the `cert-manager` Controllers in the `{{$externalLabels.cluster}}`
              Cluster have *failed to make AMCE requests* to upstream services for at least the last
              thirty minutes.
            description: >-
              `{{$labels.pod}}` on `Node` `{{$labels.node}}` (*{{$value}} HTTP `{{$labels.method}}`
              error{{if ne $value 1.0}}s{{end}}* to
              `{{$labels.scheme}}://{{$labels.host}}/{{$labels.path}}`)
          labels:
            ignore: outside-extended-hours
            severity: warning
            slack: kub3-${cluster}-alerts-infra
            pagerduty: send
            incidentio: create
            team: platform

        - alert: CertManagerACMERateLimiting
          expr: |-
            sum by (host) (
              round(
                increase(
                  certmanager_http_acme_client_request_count{
                    status="429"
                  }[10m]
                )
              )
            ) > 0
          for: 10m
          annotations:
            title: >-
              `cert-manager` ACME Rate Limiting
            summary: >-
              One or more of the `cert-manager` Controllers in the `{{$externalLabels.cluster}}`
              Cluster have *received 429 HTTP responses* to upstream services suggesting that the
              service has been rate limited for at least the last ten minutes. Depending on the rate
              limit, `cert-manager` may be unable to generate certificates for up to a week.
            description: >-
              `{{$labels.host}}` (*{{$value}}* time{{if ne $value 1.0}}s{{end}})
          labels:
            ignore: never
            severity: critical
            slack: kub3-${cluster}-alerts-infra
            pagerduty: send
            incidentio: create
            team: platform
